
/**
 * Name: Mary Vu
 * Email: m2vu@ucsd.edu
 * Sources used: None
 * 
 * This file contains one class, Course which implements Comparable<Student>.
 * Also, this file was made for the Student objects will be stored in
 * Course objects.
 */
import java.util.Objects;

/**
 * This is my implementation of methods and instance variables that help
 * store and access information about students. This class also has instance 
 * variables that contain information on a particular students such as their
 * first name, last name, and PID number (number for identification starting
 * with an 'A' or'U)
 */
public class Student implements Comparable<Student> {
    private final String firstName;
    private final String lastName;
    private final String PID;

    /**
     * Constructor that initializes the student's information
     * 
     * @param firstName A string representing the first name of the student.
     * @param lastName A string representing the last name of the student.
     * @param PID A string representing the unique PID of the student
     */
    public Student(String firstName, String lastName, String PID) {
        if (firstName == null || lastName == null || PID == null) {
            throw new IllegalArgumentException();
        }
        this.firstName = firstName;
        this.lastName = lastName;
        this.PID = PID;
    }

    /**
     * Get the last name of the student
     * 
     * @return the student's last name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Get the first name of the student
     * 
     * @return the student's first name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Get the PID of the student
     * 
     * @return the student's unique PID
     */ 
    public String getPID() {
        return PID;
    }

    /**
     * Determine if o is also a non-null Student and all the instance variables 
     * of o equal the instance variable of the current Student object
     * 
     * @param o student in question
     * @return true if o and the current student object are equal and false
     *         otherwise
     */
    @Override
    public boolean equals(Object o) {
        Student otherStudent = (Student) o;
        if (otherStudent != null && this != null &&
                otherStudent.getFirstName().equals(this.getFirstName()) &&
                otherStudent.getLastName().equals(this.getLastName()) &&
                otherStudent.getPID().equals(this.getPID())) {
            return true;
        }
        return false;
    }

    /**
     * Get the hash value generated by Object's hash function in the order
     * of the student's firstName, lastName, and PID
     * 
     * @return the student's hash value
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.getFirstName(), this.getLastName(),
                this.getPID());
    }

    /**
     * Return 0 if all instance variables are equivalent, a negative value if 
     * the current object lexcographically comes before Student o, and a
     * positive value if the current object lexicographically comes after 
     * Student o. The order of precedence for instance variables is 
     * lastName, firstName, and PID
     * 
     * @return 0 if all instance variables are the same, -1 if current object
     * comes before o, and 1 if current object comes after o
     */
    @Override
    public int compareTo(Student o) {
        Student otherStudent = (Student) o;
        if(this.getLastName().compareTo(otherStudent.getLastName()) < 0) {
            return -1; 
        }
        if(this.getLastName().compareTo(otherStudent.getLastName()) > 0) {
            return 1;
        }
        if(this.getFirstName().compareTo(otherStudent.getFirstName()) < 0) {
            return -1;
        }
        if(this.getFirstName().compareTo(otherStudent.getFirstName()) > 0) {
            return 1;
        }
        if(this.getPID().compareTo(otherStudent.getPID()) < 0) {
            return -1;
        }
        if(this.getPID().compareTo(otherStudent.getPID()) > 0) {
            return 1;
        }
        return 0;
    }
}
